{
	"name": "DF_Movies_Transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Ds_Raw_MoviesDB",
						"type": "DatasetReference"
					},
					"name": "sourcestream"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "selectstream"
				},
				{
					"name": "filterstream"
				},
				{
					"name": "derivedstream"
				},
				{
					"name": "windowstream"
				},
				{
					"name": "aggregatestream"
				},
				{
					"name": "assertstream"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['','archive'],",
				"     rowUrlColumn: 'source_file_name') ~> sourcestream",
				"sourcestream select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          {Rotten Tomato} = {Rotton Tomato},",
				"          source_file_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectstream",
				"selectstream filter(toInteger(year)>1951) ~> filterstream",
				"filterstream derive(primaary_genere = iif(instr(genres,'|')>0,left(genres,instr(genres,'|')-1),genres)) ~> derivedstream",
				"derivedstream window(over(year,",
				"          primaary_genere),",
				"     asc({Rotten Tomato}, true),",
				"     rating = rank()) ~> windowstream",
				"windowstream aggregate(groupBy(year,",
				"          primaary_genere),",
				"     {Average Rating} = avg(toInteger({Rotten Tomato})),",
				"          {Highest Rating} = max(toInteger({Rotten Tomato})),",
				"          {Lowest Rating} = min(toInteger({Rotten Tomato}))) ~> aggregatestream",
				"aggregatestream assert(expectTrue(toInteger(year)>1952, false, 'assert1')) ~> assertstream"
			]
		}
	}
}